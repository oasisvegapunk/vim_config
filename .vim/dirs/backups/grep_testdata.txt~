#! /usr/bin/env python3
import  urllib.request , urllib.parse
import json
import requests
#import cookielib
import matplotlib.pylab as plt
from os import path
problem_num = '2'
jc_url = 'http://localhost:3019'
file_url = 'http://localhost:8000'#這邊是你檔案的根目錄url
def real_url(filepath):
    return "http://localhost:8000/mission_vega/{}".format(
        urllib.parse.quote(filepath))

#data = []
#data.append({
data = {
    "name": "post",
    "url": "/api/missions/",
    "method": "post",
    "payload": {
        "token": "JudgeToken",
        #'mission_list': json.dumps([{
        #        "tick": True,
        #        "return": {
        #            "url": "http://localhost:8000",# return url for Web Backend
        #            "payload": {
        #                "token": "secret.key",
        #            }
        #        },
        #        "prepare": {
        #            "file": {
        #                "main.cpp": real_url("submission/"+ problem_num +"/main.cpp"),
        #                "verdict.cpp": real_url("verdict/verdict.cpp")
        #            },
        #            "execute": [{
        #                "name": "MOIDFY",
        #                "command": [
        #                    "g++",
        #                    "-std=c++11",
        #                    "main.cpp",
        #                    "-o",
        #                    "a.out"
        #                ],
        #            }],
        #        },
        #        "tasks": {
        #            "task": [{
        #                "file": {
        #                },
        #                "macro": {
        #                    "__TIME_LIMIT__": "1234",
        #                }
        #            }, {
        #                "macro": {
        #                "__TIME_LIMIT__": 20000,
        #            }
        #            }],
        #            "execute": [{
        #                "name": "execute",
        #                "command": [
        #                    "./a.out",
        #                ],
        #                "time_limit": "__TIME_LIMIT__",
        #                }, {
        #                "name": "verdict",
        #                "command": [
        #                    "/usr/bin/env ls",
        #                ],
        #                }]
        #        },
        #        "final": {
        #        }   
        #    }]),
        'mission': json.dumps({
            'return': {
                'url': 'http://localhost:3019',
            },
            'prepare': {
                'file': {
                    'main.cpp': real_url('submission/'+problem_num+'/main.cpp'),
                    'verdict.cpp': real_url('verdict/verdict.cpp')
                },
                'execute': [{
                    'command': [
                        'g++',
                        '-std=c++11',
                        '-O2',
                        'main.cpp',
                        '-o',
                        'a.out',
                    ],
                    'memory_limit': 2097152,
                    'stdout': 'Compile_stdout.txt',
                    'stderr': 'Compile_stderr.txt',
                    'name': 'Compile main.cpp',
                }, {
                    'command': [
                        'g++',
                        '-std=c++11',
                        '-O2',
                        'verdict.cpp',
                        '-o',
                        'verdict',
                    ],
                    'memory_limit': 2097152,
                    'stdout': 'stdout.txt',
                    'stderr': 'stderr.txt',
                    'name': 'Compile verdict.cpp',
                }],
            },
            'tasks': {
                'task': [{
                    'file': {
                        '__TASK_ID__.in': real_url('testdata/'+problem_num+'/1/1.in'),
                        '__TASK_ID__.out': real_url('testdata/'+problem_num+'/1/1.out'),
                    },
                    'macro': {
                        '__TIME_LIMIT__': 10000,# original 1000 = 1sec
                    }
                    }, {
                    'file': {
                        '1.in': real_url('testdata/'+problem_num+'/2/2.in'),
                        '1.out': real_url('testdata/'+problem_num+'/2/2.out'),
                    },
                    'macro': {
                        '__TIME_LIMIT__': 10000,
                    }
                }],
                'execute': [{
                    'name':'Running input:1.in  output:1.out',
                    'command': [
                        './a.out',
                    ],
                    'memory_limit': 2097152,
                    'stdin': '__TASK_ID__.in',
                    'stdout': '__TASK_ID__.user_out',
                    'scope': {
                        'enable': True,
                        'import': [
                            'a.out',
                            '__TASK_ID__.in',
                        ],
                        'export': [
                            '__TASK_ID__.user_out',
                            '__TASK_ID__.meta',
                        ],
                    },
                    'meta': '__TASK_ID__.meta',
                    'record': {
                        'enable': True,
                        'stdout': 1024,
                        'stderr': 1024,
                    },
                    'time_limit': '__TIME_LIMIT__',

                    }, {
                    'name':"Running verdict comparing testfile",
                    'command': [
                        './verdict', '__TASK_ID__.user_out', '__TASK_ID__.out'
                    ],
                    'stdout': 'verdict_result',
                    'record': {
                        'enable': True,
                        'stdout': 1024,
                        'stderr': 1024,
                    }
                    }, {
                   # 'command': [
                   #     'cat', '__TASK_ID__.meta',
                   # ],
                   # }, {
                    'name':'cat meta file',
                    'command': [
                        'cat', 'meta',
                    ],
                    }, {
                    'name':'cat verdict result',
                    'command': [
                        'cat', 'verdict_result',
                   #      'ls' , '-al'
                    ]
                    }, {
                   # 'command': [
                   #     'cat', 'mission_result',
                   # ]
                   # }, 
                   # {
                    'name':'cat Compile_stderr.txt',
                    'command': [
                        'cat', 'Compile_stderr.txt',
                    ]
                    }
                    ]
            },
        })
    }
}




def main():
    # Login
    body = urllib.parse.urlencode(data['payload'])
    headers = {'accept':'*/*','User-Agent' :'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36'}
    body = body.encode('ascii')
    print('[VEGA]URL=',jc_url+data['url'])
    res = requests.post(jc_url+data['url'],data=json.dumps(data['payload']) )
    #req = urllib.request.Request( jc_url+data['url'] ,data=body, headers= headers,method=data['method'])                   
    #with urllib.request.urlopen(req) as response:
    #    print(response.read().decode('utf-8'))
    #    print("Response Meta Data")
    #   a = dict(response.info())
    #   print(a.items())
    

if __name__ == '__main__':
    main()
