// RSA first version 2018.03.11
// Author: WillVegapunk
// Email: willvegapunk@gmail.com
// ******************************************
// Bob                                  | Alic
// -----------------------------------------------------------------
// choose secret primes p and q         |
// n = (p-1)(q-1)                       |
// choose encryption exponent           |
//  with gcd (e, n) = 1                 |
// publish N = p*q(mod e)               |
//                                      | Choose Plain text m.
//                                      | Use Bob's public key (N,e)
//                                      |   to compute c = m^e (mod N)
//                                      | Send cipher(c) to Bob
//                                      |
//  Compute d staisfying                |
//      ed = 1 (mod (p-1)(q-1))         |
//  Compute m' = (c) ^ d (mode N)       |
//   /*c means cipher*/                 |
//  m' would be the decrypted message !!|
//
// ******************************************
// Architecture
// Data Structure:
//      Representation of Large Number 
// Modules:
// 1. Large Prime Generator
// 2. Inverse Modulus Generator (for decrypt)
// 3. Random Number Generator to generate e, such that coprime with N = p*q


#include <stdio.h>
#include <math.h>

// Eulcidean Method
// h is always smaller
int gcd(int a, int h){
    int temp;
    while(1){
    temp =  a%h;
    if(temp==0)
        return h;
    
    a = h;
    h = temp;
    }
}

int main(){
    // choose two prime number
    double p = 3;
    double q = 7;

    // n for modulus , which is the public key
    double Pk_N = p * q;
    double count;

    //totient  for generate private key d
    double totient = (p-1)*(q-1);

    //public key
    double e = 2; // e would come from random number generator
    while(e<totient){
    count = gcd(e,totient);
    if(count==1)
        break;
    else
        e++;
    }

    double Pk_e = e;




    // Encryption with Public Key
    double msg = 1991;
    double c = pow(msg,Pk_e);
    c = fmod(c,Pk_N); // c = msg^Pk_e (mod Pk_N)

    printf("Original Message Data: %lf\n", msg);
    printf("Encrypt Data: %lf\n",c);



    // private key generate
    double Sk_d; // inverse of e (mod totient)
    double k = 3; // arbitrary value
    // choose Sk_d such that it satisfies d*e= 1+ k*totient
    Sk_d = (1 + (k*totient)) / Pk_e;
    // Decryption with private key d
    double decryp_m = pow(c,Sk_d);
    decryp_m = fmod(decryp_m,Pk_N); // decryp_m = c^Sk_d  (mod Pk_N);

    printf("Secret Key: %lf\n", Sk_d);
    printf("Decrypt Data: %lf\n", decryp_m);


    return 0;
}
