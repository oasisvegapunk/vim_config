module CC (
	in_n0, 
	in_n1, 
	in_n2, 
	in_n3, 
	opt, 
	out_n0, 
	out_n1, 
	out_n2, 
	out_n3
);

input[3:0]in_n0,in_n1,in_n2,in_n3;
input[1:0]opt;
output reg[3:0]out_n0,out_n1,out_n2,out_n3;

parameter sort_smooth_0   = 'b00;
parameter sort_norm_1     = 'b01;
parameter inverse_norm_2  = 'b10;
parameter smooth_mirror_3 = 'b11;


reg [3:0] comp1_L,comp1_S,comp2_L,comp2_S,max,min,tmp1,tmp2,min2,max2;
reg [5:0] sum;
reg [3:0] avg;
wire [3:0] inv_norm_1, inv_norm_2, inv_norm_3, inv_norm_4;
norm inverse_norm_inst (in_n3, in_n2, in_n1, in_n0,inv_norm_1, inv_norm_2, inv_norm_3, inv_norm_4);

wire [3:0] sm_mir_o1, sm_mir_o2, sm_mir_o3, sm_mir_o4;
wire [3:0] mir1, mir2, mir3, mir4;
smooth smooth_mirror_stg1(in_n0,in_n1,in_n2,in_n3,sm_mir_o1, sm_mir_o2, sm_mir_o3, sm_mir_o4);

mirror_table    inst0(sm_mir_o1, mir1);
mirror_table    inst1(sm_mir_o2, mir2);
mirror_table    inst2(sm_mir_o3, mir3);
mirror_table    inst3(sm_mir_o4, mir4);

always@(*)begin
    case(opt)
        sort_smooth_0  :begin
                           
                    {comp1_L,comp1_S} = (in_n0 >= in_n1) ? {in_n0, in_n1} : {in_n1, in_n0};
                    {comp2_L,comp2_S} = (in_n2 >= in_n3) ? {in_n2, in_n3} : {in_n3, in_n2};
                    {max,tmp1} = (comp1_L > comp2_L) ? {comp1_L , comp2_L} : {comp2_L ,  comp1_L};
                    {min,tmp2} = (comp1_S < comp2_S) ? {comp1_S , comp2_S} : {comp2_S ,  comp1_S};
                    {min2,max2} = (tmp1 < tmp2) ? {tmp1, tmp2} : {tmp2, tmp1};
                    sum = ((in_n0 + in_n1) + ( in_n2 + in_n3 ));
                    avg = sum[5:2]; 
                    {out_n0, out_n1, out_n2, out_n3} = {min, min2, max2, avg};
                    
                    end
         sort_norm_1    :begin
                    {comp1_L,comp1_S} = (in_n0 >= in_n1) ? {in_n0, in_n1} : {in_n1, in_n0};
                    {comp2_L,comp2_S} = (in_n2 >= in_n3) ? {in_n2, in_n3} : {in_n3, in_n2};
                    {max,tmp1} = (comp1_L > comp2_L) ? {comp1_L , comp2_L} : {comp2_L ,  comp1_L};
                    {min,tmp2} = (comp1_S < comp2_S) ? {comp1_S , comp2_S} : {comp2_S ,  comp1_S};
                    {min2,max2} = (tmp1 < tmp2) ? {tmp1, tmp2} : {tmp2, tmp1};
                    //{min, min2, max2, max};
                    {out_n0,out_n1,out_n2,out_n3} = {4'b0, min2 - min, max2 - min, max - min};
                end
         inverse_norm_2 :begin
                    {out_n0,out_n1,out_n2,out_n3} = {in_n0,inv_norm_1, inv_norm_2, inv_norm_3, inv_norm_4};
                end
         smooth_mirror_3:begin
                    {out_n0,out_n1,out_n2,out_n3} = {mir1, mir2, mir3, mir4};
            end
       default:// this should not happen 
        {out_n0,out_n1,out_n2,out_n3} = 'hffff;
    endcase
end












endmodule 
// ------------------- smooth
module smooth(
    in_n0,in_n1,in_n2,in_n3,
    out_n0, out_n1, out_n2, out_n3);

input  [3:0] in_n0,in_n1,in_n2,in_n3;
output reg [3:0] out_n0, out_n1, out_n2, out_n3;
wire [3:0] avg ;
wire [5:0] sum;
reg [3:0] comp1,comp2,comp3;

assign sum =((in_n0 + in_n1) + ( in_n2 + in_n3 )); 
assign     avg = sum[5:2];


always@(*)begin
    comp1 = (in_n0 <= in_n1)? in_n1 : in_n0;
    comp2 = (in_n2 <= in_n3)? in_n3 : in_n2;
    comp3 = (comp1 <= comp2)? comp2 : comp1;
end

always@(*)begin
    case(comp3)// if there is the same choose rightest
        in_n3: {out_n0, out_n1, out_n2, out_n3} = {in_n0,in_n1,in_n2, avg };
        in_n2: {out_n0, out_n1, out_n2, out_n3} = {in_n0,in_n1, avg ,in_n3};
        in_n1: {out_n0, out_n1, out_n2, out_n3} = {in_n0, avg ,in_n2,in_n3};
        in_n0: {out_n0, out_n1, out_n2, out_n3} = {avg  ,in_n1,in_n2,in_n3};
        default:
               {out_n0, out_n1, out_n2, out_n3} = {in_n0,in_n1,in_n2,avg };// this is for simplify the circuit, reduce area

    endcase
end
endmodule

// --------------- mirror --------------------





module  mirror_table(in,out);
input [3:0] in;
output reg [3:0] out;

    always@(*)begin
        case(in)
            'd0: out = 'd0;
            'd1: out = 'd9;
            'd2: out = 'd8;
            'd3: out = 'd7;
            'd4: out = 'd6;
            'd5: out = 'd5;
            'd6: out = 'd4;
            'd7: out = 'd3;
            'd8: out = 'd2;
            'd9: out = 'd1;
        default:// this should not be happen so if show up 'd15 means there's bug
            out = 'd1;
        endcase
    end
endmodule

//----------------------------- normalization --------------------------

module norm(in_n0,in_n1,in_n2,in_n3,out_n0, out_n1, out_n2, out_n3);
    input [3:0] in_n0,in_n1,in_n2,in_n3;
    output [3:0] out_n0, out_n1, out_n2, out_n3;
    
    // signed substraction so the msb bit would be the signal for negative 
    wire [4:0] tmp_n1 = in_n1 - in_n0;
    wire [4:0] tmp_n2 = in_n2 - in_n0;
    wire [4:0] tmp_n3 = in_n3 - in_n0;
    
    wire [3:0] pos1,pos2,pos3;
    
    neg2pos neg2posinst1(tmp_n1[3:0], pos1 );
    neg2pos neg2posinst2(tmp_n2[3:0], pos2 );
    neg2pos neg2posinst3(tmp_n3[3:0], pos3 );

    assign    out_n0 = 4'b0; // first output alwyas 0
        // if neg  turninto pos else unchanged
    assign    out_n1 = tmp_n1[4] ? pos1 : tmp_n1[3:0] ; 
    assign    out_n2 = tmp_n2[4] ? pos2 : tmp_n2[3:0] ; 
    assign    out_n3 = tmp_n3[4] ? pos3 : tmp_n3[3:0] ; 
endmodule

module neg2pos(in,out);
    input [3:0] in;
    output reg [3:0] out;
    always@(*)begin
        case(in)
            'd15:// -1
                    out = 'd9;
            'd14:// -2
                    out = 'd8;
            'd13:// -3
                    out = 'd7;
            'd12:// -4
                    out = 'd6;
            'd11:// -5
                    out = 'd5;
            'd10:// -6
                    out = 'd4;
            'd9:// -7
                    out = 'd3;
            'd8:// -8
                    out = 'd2;
            'd7:// -9
                    out = 'd1;
            default: // this should never happen
                    out = 'd0;
        endcase
    end
endmodule


