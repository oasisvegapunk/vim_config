from collections import deque
import random
import numpy as np
rand_num = random.randint(0,99999)
random.seed(a=rand_num)

def maze2graph(maze):
    height = len(maze)
    width = len(maze[0]) if height else 0
    graph = {(i, j): [] for j in range(width) for i in range(height) if not maze[i][j]}
    for row, col in graph.keys():
        if col < width - 1 and not maze[row][col + 1]:
            graph[(row, col)].append(("R", (row, col + 1)))
            continue

        if row < height - 1 and not maze[row + 1][col]:
            graph[(row, col)].append(("D", (row + 1, col)))
            continue

        if 0 < col and not maze[row][col - 1]:
            graph[(row, col - 1)].append(("L", (row, col-1)))
            continue
            
        if 0 < row and not maze[row - 1][col]:
            graph[(row - 1, col)].append(("U", (row-1, col)))
            continue
    return graph

def find_path_dfs(maze):
    start, goal = (1, 1), (13, 13)
    stack = deque([("", start)])
    visited = set()
    graph = maze2graph(maze)
    while stack:
        path, current = stack.pop()
        if current == goal:
            path = path + str(current[0]) +','+ str(current[1]) + '\n'
            return path
        if current in visited:
            continue
        visited.add(current)
        for direction, neighbour in graph[current]:
            stack.append((path + str(current[0]) +','+ str(current[1]) + '\n', neighbour))
    return "NO WAY!"


def wall_gen(maze):
    height = len(maze)
    width = len(maze[0]) if height else 0
    for r_i, row in enumerate(maze):
        if(r_i == 0 or r_i == height-1):
            maze[r_i] = np.ones_like(row)
        for c_i,col in enumerate(row):
            if(c_i==0 or c_i == width-1):
                maze[r_i][c_i] = 1
                continue

    return maze

graph_size = 15
maze = np.random.randint(2,size=(graph_size,graph_size))

built_maze = wall_gen(maze)
built_maze[1][1] = 0
built_maze[graph_size-2][graph_size-2]=0

for i in range(13):
    if(i > 0):
        built_maze[1][i] = 0
for i in range(13):
    if(i > 0):
        built_maze[i][13] = 0

question_file = open("maze.txt",'w')
ans_file = open("sol.txt",'w')
#question_file.write(str(TESTSIZE)+'\n' )
question_file.write("size:1"+'\n' )

for i in built_maze:
    for j in i:
        question_file.write(str(j)+'\n')
path = find_path_dfs(built_maze)
ans_file.write(path)

question_file.close()
ans_file.close




